/* resched.c  -  resched */

#include <conf.h>
#include <kernel.h>
#include <proc.h>
#include <q.h>

unsigned long currSP;	/* REAL sp of current process */
extern int ctxsw(int, int, int, int);
/*-----------------------------------------------------------------------
 * resched  --  reschedule processor to highest priority ready process
 *
 * Notes:	Upon entry, currpid gives current process id.
 *		Proctab[currpid].pstate gives correct NEXT state for
 *			current process if other than PRREADY.
 *------------------------------------------------------------------------
 */
extern unsigned long randkey;
int resched()
{
	register struct	pentry	*optr;	/* pointer to old process entry */
	register struct	pentry	*nptr;	/* pointer to new process entry */

	/* no switch needed if current process priority higher than next*/
//////////????///////////////////////////////////////////////////////////////???/////////////////////////???///////////////////
	struct qent *que;
//	qid list;
//	que = &q[list]; 
	struct pentry *proc;
	int randkey = rand()%50;
	int i;
/*
if(!QUANTUM){
	if (nonempty(list)){
	for (i=0; i<NPROC; i++){
		if (nptr->pprio<randkey){
			randkey = randkey-(nptr->pprio);  }
		else if (nptr->pprio>randkey){
			dequeue(q[currpid].qkey);
			nptr->pstate=PRCURR;
			preempt = QUANTUM;
}

	q[list]=q[list].qnext;	}	
}
}
*/
// for (i=0; i<NPROC; i++){
// if(((optr=&proctab[currpid])->pstate==PRCURR)){ 
//                if (lastkey(rdytail)>randkey){
//	         	 optr->pstate = PRREADY;
//	                 insert(currpid,rdyhead,optr->pprio);
//              	 nptr = &proctab[ (currpid = getlast(rdytail)) ];
//                 	 nptr->pstate = PRCURR;  } 
//		else if(lastkey(rdytail)<randkey){
//			randkey = randkey - lastkey(rdytail); }
//}
//}


//	for (i=0; i<NPROC; i++){
//	nptr = &proctab[i];
//	if(nptr->pstate==PRREADY){
//		if(nptr->pprio>randkey){
//			dequeue(i);
//			optr->pstate = PRREADY;
//                      insert(currpid,rdyhead,optr->pprio);
//			nptr = &proctab[ (currpid = getlast(rdytail))];
//                        nptr->pstate = PRCURR;
//			preempt = QUANTUM;
//			ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask); 
//		}
//		else if((nptr->pprio)<randkey){
//			randkey=randkey-(nptr->pprio);  }

//}                        
//}
	
//	while(list>rdyhead){
//		 nptr = &proctab[q[rdytail]];
//		if(nptr=proctab[q[rdytail].qprev]->pprio>randkey){
//			optr->pstate = PRREADY;
//                      insert(currpid,rdyhead,optr->pprio);
//                        dequeue(list);
//                        nptr->pstate = PRCURR;
//                        preempt = QUANTUM;
//                        ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
//} 		else if ((nptr->pprio)<randkey){
//                        randkey=randkey-(nptr->pprio);  }
//}


	int index = q[q[rdytail].qprev].qkey; 
	nptr = &proctab[ (currpid = getlast(rdytail))];
	optr = &proctab[currpid];
//	optr->pstate = PRREADY;
//	insert(currpid,rdyhead,optr->pprio);
//	dequeue(index);
//	nptr->pstate = PRCURR;
//	preempt = QUANTUM; 
//	kprintf("old process %s    new proces %s  \n", optr->pname , nptr->pname);
  //      ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);

	while(index>q[rdyhead].qkey){
		//kprintf("sadasdas\n");
//		nptr=&proctab[list];
                if(nptr->pprio>randkey){
                        optr->pstate = PRREADY;
                        insert(currpid,rdyhead,optr->pprio);
                        dequeue(index);
                        nptr->pstate = PRCURR;
                        preempt = QUANTUM; 
			kprintf("old process %s    new proces %s  \n", optr->pname , nptr->pname);
		      ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
}               else if ((nptr->pprio)<randkey){
                        randkey=randkey-(nptr->pprio);  }
	index=q[index].qprev;

}
		






	
	
/*
	if (QUANTUM){
	randkey = rand()%60;
		if (( (optr= &proctab[currpid])->pstate == PRCURR) && nptr->pprio<randkey){
			randkey=randkey-(nptr->pprio);
		else if(nptr->pprio>randkey){
			insert(	
} 

}

} */
/////////////////////////////?????//////////////////////////////////////////////////////

//	if ( ( (optr= &proctab[currpid])->pstate == PRCURR) &&
//	   (lastkey(rdytail)<optr->pprio)) {
//		return(OK);
//	}
	
	/* force context switch */

//	if (optr->pstate == PRCURR) {
//		optr->pstate = PRREADY;
//		insert(currpid,rdyhead,optr->pprio);
//	}

	/* remove highest priority process at end of ready list */

//	nptr = &proctab[ (currpid = getlast(rdytail)) ];
//	nptr->pstate = PRCURR;		/* mark it currently running	*/
#ifdef	RTCLOCK
//	preempt = QUANTUM;		/* reset preemption counter	*/
#endif
	
//	ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
	
	/* The OLD process returns here when resumed. */
	return OK;
}

